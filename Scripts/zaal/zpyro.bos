piece body,head,tail,lthigh,lknee,lshin,lfoot,rthigh,rknee,rshin,rfoot,rsack,lsack;

static-var aMoving, bMoving, bAiming, bCanAim, shooting_num, base_speed, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16
#define SIG_RESTORE			32

#include "sfxtype.h"
#include "exptype.h"


walk()
{
 while (aMoving)
 {
    bMoving = TRUE;
	if (aMoving) {
			turn lthigh to x-axis <70> speed<115>;
			turn lknee to x-axis <-40> speed<145>;
			turn lshin to x-axis <20> speed<145>;
			turn lfoot to x-axis <-50> speed<210>;
			
			turn rthigh to x-axis <-20> speed<210>;
			turn rknee to x-axis <-60> speed<210>;
			turn rshin to x-axis <50> speed<210>;
			turn rfoot to x-axis <30> speed<210>;
			
			turn body to z-axis <5> speed <20>;
			turn lthigh to z-axis <-5> speed <20>;
			turn rthigh to z-axis <-5> speed <20>;
			move body to y-axis [0.7] speed <4000>;			
			turn tail to y-axis <10> speed <40>;
			turn head to x-axis <-10> speed <20>;
			turn tail to x-axis <10> speed <20>;
			wait-for-turn lthigh around x-axis;
			}
				if (aMoving) {
			
			turn lthigh to x-axis <-10> speed<160>;
			turn lknee to x-axis <15> speed<145>;
			turn lshin to x-axis <-60> speed<250>;
			turn lfoot to x-axis <30> speed<145>;
			
			turn rthigh to x-axis <40> speed<145>;
			turn rknee to x-axis <-35> speed<145>;
			turn rshin to x-axis <-40> speed<145>;
			turn rfoot to x-axis <35> speed<145>;
			
			move body to y-axis [0] speed <4000>;
			turn head to x-axis <10> speed <20>;
			turn tail to x-axis <-10> speed <20>;
			wait-for-turn lshin around x-axis;}
				if (aMoving) {
			
			turn rthigh to x-axis <70> speed<115>;
			turn rknee to x-axis <-40> speed<145>;
			turn rshin to x-axis <20> speed<145>;
			turn rfoot to x-axis <-50> speed<210>;
			
			turn lthigh to x-axis <-20> speed<210>;
			turn lknee to x-axis <-60> speed<210>;
			turn lshin to x-axis <50> speed<210>;
			turn lfoot to x-axis <30> speed<210>;
			
			turn tail to y-axis <-10> speed <40>;
			turn body to z-axis <-5> speed <20>;
			turn lthigh to z-axis <5> speed <20>;
			turn rthigh to z-axis <5> speed <20>;
			move body to y-axis [0.7] speed <4000>;
			turn head to x-axis <-10> speed <20>;
			turn tail to x-axis <10> speed <20>;
			wait-for-turn rthigh around x-axis;}
				if (aMoving) {
			
			turn rthigh to x-axis <-10> speed<160>;
			turn rknee to x-axis <15> speed<145>;
			turn rshin to x-axis <-60> speed<250>;
			turn rfoot to x-axis <30> speed<145>;
			
			turn lthigh to x-axis <40> speed<145>;
			turn lknee to x-axis <-35> speed<145>;
			turn lshin to x-axis <-40> speed<145>;
			turn lfoot to x-axis <35> speed<145>;
			
			
			move body to y-axis [0] speed <4000>;
			turn head to x-axis <10> speed <20>;
			turn tail to x-axis <-10> speed <20>;
			wait-for-turn rshin around x-axis;
			
			}
			
		}
		return 0;
}

Halt()
{	
	sleep 150;
	if(!aMoving)
	{
	bMoving = FALSE;
	turn lfoot		to x-axis <0> 		speed <100>;
	turn rfoot		to x-axis <0> 		speed <100>;
	turn rthigh 	to x-axis <0> 		speed <100>;
	turn lthigh 	to x-axis <0> 		speed <100>;
	turn lshin  	to x-axis <0> 		speed <100>;
	turn rshin 		to x-axis <0> 		speed <100>;
	turn lfoot		to y-axis <0> 		speed <100>;
	turn rfoot		to y-axis <0> 		speed <100>;
	turn rthigh 	to y-axis <0> 		speed <100>;
	turn lthigh 	to y-axis <0> 		speed <100>;
	turn lshin  	to y-axis <0> 		speed <100>;
	turn rshin 		to y-axis <0> 		speed <100>;
	}
}

StartMoving()
{
	aMoving = TRUE;
	if (!bMoving)
	{
		start-script Walk();
	}
}

StopMoving()
{
	aMoving = FALSE;
	start-script Halt();
}


Activate()
{	

}

Deactivate()
{

}

RestoreAfterDelay()
{
	sleep 1000;
	
}

Create()
{
	emit-sfx 1024+2 from body;
	
	start-script RestoreAfterDelay();
}

AimFromPrimary(piecenum)
	{	piecenum=head;	}

QueryPrimary(piecenum)
	{	piecenum=head; }

AimFromSecondary(piecenum)
	{	piecenum=head;	}

QuerySecondary(piecenum)
	{	piecenum=head; }


AimPrimary(heading,pitch)
{
    signal SIG_AIM;
	set-signal-mask SIG_AIM;
	 	while( 255 > heading )
		{
			set UNKNOWN_UNIT_VALUE(82) to 0 - 1000 + get UNKNOWN_UNIT_VALUE(82);
			heading = heading + 1000;
			sleep 1;
		}
		while( heading > 255 )
		{
			set UNKNOWN_UNIT_VALUE(82) to 1000 + get UNKNOWN_UNIT_VALUE(82);
			heading = heading - 1000;
			sleep 1;
		}	
	return (1);
}

AimSecondary(heading,pitch)
	{
  	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn head to y-axis heading speed <5000>;
	turn head to x-axis 0 -pitch speed <5000>;
	wait-for-turn head around y-axis;
	wait-for-turn head around x-axis;
	return(1);
	}
	
Shot2()
	{
	turn lsack to y-axis <30> speed <200>;
	turn rsack to y-axis <-30> speed <200>;
	move rsack to x-axis [-1] speed [9];
	move lsack to x-axis [1] speed [9];;
	wait-for-turn lsack around y-axis;
	turn lsack to y-axis <0> speed <20>;
	turn rsack to y-axis <0> speed <20>;
	move rsack to x-axis [0] speed [0.3];
	move lsack to x-axis [0] speed [0.3];
	emit-sfx 1027  from head;
	}
	
SweetSpot(piecenum)
	{	piecenum=body;	}	
	
HitByWeaponId()
	{
	emit-sfx 1024 from head;
	return 100;
	}

Killed( severity, corpsetype )
	{
	corpsetype = 1;
	emit-sfx 1025 from head;
	explode head type EXPLODE_ON_HIT;
	explode tail type EXPLODE_ON_HIT;
	explode lthigh type EXPLODE_ON_HIT;
	explode rthigh type EXPLODE_ON_HIT;
	return( 0 );
	}